; ======================================================================
; IconShell / GuiShell Configuration
; ----------------------------------------------------------------------
; This file customizes the dynamic menu for the IconShell GUI.
; If this file (guishell.ini) is missing or has errors, the shell
; falls back to a builtâ€‘in static menu (see config.js).
;
; BASIC STRUCTURE:
;   [GuiShell]          Optional global shell settings
;   [Menu]              Defines ordering of top-level menu items
;   [Item.<key>]        One section per menu entry specified in Menu.items
;                       <key> is a short identifier used only internally.
;
; TOP-LEVEL ITEM TYPES (Item.<key> / type=...):
;   builtin        -> Built-in action. Requires: builtin = chat|settings|exit
;   xtrn_section   -> Dynamically lists external programs in a section.
;                     Requires: section = <number>  (0 = first xtrn section)
;   command        -> A single clickable action. Requires: command = <spec>
;   who            -> Dynamic folder showing currently online users
;
; COMMAND SPEC (when type=command):
;   command = exec_xtrn:CODE      Launch external program CODE (e.g. ECREADER)
;   command = js: <JavaScript>    Inline JS executed in shell context (this=IconShell instance)
;                                  Keep it short; errors are logged, item skipped if invalid.
;
; ICONS:
;   icon = <basename>
;   Looks for mods/iconshell/lib/icons/<basename>.ans (or .bin). If missing,
;   the shell may fall back to default styling.
;
; ORDERING:
;   The comma-separated list in [Menu] items=... dictates the visual order.
;   Removing an identifier or misspelling it simply omits that item (warning logged).
;
; ERROR HANDLING / SAFETY:
;   - Unknown types or missing required keys are logged (warning) and skipped.
;   - If all items fail to load, static fallback is used.
;   - Builtin names must match those implemented in config.js (chat, settings, exit).
;
; ADDING A NEW CUSTOM JS ITEM EXAMPLE:
;   1) Add its key to [Menu] items list, e.g. ... ,mytool
;   2) Create section:
;        [Item.mytool]
;        type = command
;        label = My Tool
;        icon = folder
;        command = js: this.runExternal(function(){ bbs.sys_status |= 0; });
;
; NOTES:
;   - xtrn_section numbering matches Synchronet external program sections (0-based here).
;   - 'who' item dynamically rebuilds when opened (shows online users).
;   - WelcomeMessage can be displayed/logged by guishell.js on startup.
; ======================================================================

[GuiShell]
; Optional startup banner text (purely cosmetic right now)
WelcomeMessage = Hello from guishell.ini

[Menu]
; Comma-separated order of top-level menu entries. Each must have a matching [Item.<key>] section.
; Reorder to taste; remove to hide; add new keys after defining new [Item.*] sections.
items = mail,messages,filearea, games,chat,apps,sysop,ansiview,who,tests,settings,exit

[Item.chat]
; Built-in chat client launcher
type = builtin
builtin = chat
label = Chat
icon = chat

[Item.games]
; External programs section #1 (2nd section if counting from 1)
type = xtrn_section
section = 1
label = Games
icon = gameboy

[Item.apps]
; External programs section #0 (first external section)
type = xtrn_section
section = 0
label = Apps
icon = apps_folder

[Item.sysop]
; Sysop / admin-only external programs section (#2)
type = xtrn_section
section = 2
label = Sysop
icon = macplus
; user.security.level
min_level = 90
; TODO user.is_sysop
; is_sysop = true 
; TODO bbs.compare_ars(requirements)
;compare_ars = bbs.compare_ars(requirements)

[Item.messages]
; Launch external message reader (ECREADER)
type = command
command = exec_xtrn:ECREADER
label = Forums
icon = bulletin_board

[Item.ansiview]
; Launch external file viewer (ANSIVIEW)
type = command
command = exec_xtrn:ANSIVIEW
label = ANSI Viewer
icon = art_gallery

[Item.who]
; Dynamic list of currently online users
type = builtin
label = Who
builtin = who_list
icon = people

[Item.settings]
; Built-in user settings editor
type = builtin
builtin = settings
label = Settings
icon = user_settings

[Item.tests]
; A folder grouping experimental / test subprograms
type = folder
items = sysinfo,privatemsg,hello,userlist,calendar,clock,rawgate
label = Tests
icon = lab

[Item.privatemsg]
type = builtin
builtin = privatemsg
label = Private Message
icon = chat

[Item.hello]
type = builtin
builtin = hello
label = Hello
icon = document

[Item.userlist]
type = builtin
builtin = userlist
label = User List
icon = group

[Item.sysinfo]
type = builtin
builtin = sysinfo
label = Sys Info
icon = macplus

[Item.filearea]
type = builtin
builtin = filearea
label = File Areas
icon = floppy_disk_icon_final

[Item.calendar]
type = builtin
builtin = calendar
label = Calendar
icon = calendar

[Item.clock]
type = builtin
builtin = clock
label = Clock
icon = clock

[Item.rawgate]
type = builtin
builtin = rawgate
label = Rawgate
icon = redman

[Item.mail]
type = builtin
builtin = mail
label = Mail
icon = mailbox

[Item.exit]
; Exit back to the BBS / previous shell
type = builtin
builtin = exit
label = Logoff
icon = logoff